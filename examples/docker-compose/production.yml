# Production Docker Compose
# Security-hardened deployment with monitoring

version: '3.8'

services:
  stash-filter:
    image: your-username/stash-filter:latest
    container_name: stash-filter
    restart: unless-stopped
    
    # Security settings
    user: "1000:1000"
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Network access
    ports:
      - "127.0.0.1:5000:5000"  # Localhost only
    
    # Persistent volumes
    volumes:
      - stash-filter-data:/app/data
      - stash-filter-logs:/app/logs
      - stash-filter-config:/app/config:ro
      - /tmp:/tmp  # Required for read-only filesystem
    
    # Environment from file
    env_file:
      - .env.production
    
    # Health monitoring
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - internal
      - monitoring

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: stash-filter-nginx
    restart: unless-stopped
    
    ports:
      - "443:443"
      - "80:80"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    
    depends_on:
      - stash-filter
    
    networks:
      - internal
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: stash-filter-prometheus
    restart: unless-stopped
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    networks:
      - monitoring
    
    labels:
      - "nginx.enable=true"
      - "nginx.http.routers.prometheus.rule=Host(`metrics.yourdomain.com`)"

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: stash-filter-grafana
    restart: unless-stopped
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your-secure-admin-password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.yourdomain.com
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.yourdomain.com:587
    
    networks:
      - monitoring
    
    labels:
      - "nginx.enable=true"
      - "nginx.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)"

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: stash-filter-loki
    restart: unless-stopped
    
    volumes:
      - ./monitoring/loki.yml:/etc/loki/loki.yml:ro
      - loki-data:/loki
    
    command: -config.file=/etc/loki/loki.yml
    
    networks:
      - monitoring

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: stash-filter-promtail
    restart: unless-stopped
    
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    
    command: -config.file=/etc/promtail/config.yml
    
    networks:
      - monitoring

  # Backup service
  backup:
    image: alpine:latest
    container_name: stash-filter-backup
    restart: unless-stopped
    
    volumes:
      - stash-filter-data:/backup/data:ro
      - ./backups:/backup/output
      - ./scripts/backup.sh:/backup/backup.sh:ro
    
    command: |
      sh -c "
        apk add --no-cache sqlite dcron
        echo '0 2 * * * /backup/backup.sh' | crontab -
        crond -f
      "
    
    networks:
      - internal

networks:
  internal:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge

volumes:
  stash-filter-data:
    driver: local
  stash-filter-logs:
    driver: local
  stash-filter-config:
    driver: local
  nginx-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

# Secrets for production (Docker Swarm)
secrets:
  stash_api_key:
    file: ./secrets/stash_api_key.txt
  whisparr_api_key:
    file: ./secrets/whisparr_api_key.txt
  secret_key:
    file: ./secrets/secret_key.txt
